---
- name: Run Ubuntu STIG manual check commands and collect results
  hosts: all
  gather_facts: false
  become: true

  vars_files:
    - commands.json

  vars:
    results_dir: "./results"

  pre_tasks:
    - name: Ensure results directory exists on controller
      delegate_to: localhost
      run_once: true
      become: false
      ansible.builtin.file:
        path: "{{ results_dir }}"
        state: directory
        mode: "0755"

  tasks:
    - name: Run each STIG check command
      vars:
        sanitized_cmd: >-
          {{ item.Command
             | regex_replace('\r', '')
             | regex_replace('\n', ' ')
             | regex_replace('^\s+|\s+$', '') }}
      ansible.builtin.command:
        argv:
          - bash
          - -lc
          - "{{ sanitized_cmd }}"
      environment:
        SYSTEMD_PAGER: ""
        SYSTEMD_COLORS: "0"
        LC_ALL: "C"
        LANG: "C"
      register: cmd_out
      loop: "{{ commands }}"
      loop_control:
        label: "{{ item.RuleID }}"
      ignore_errors: true
      changed_when: false
      failed_when: false

    # Debug tasks removed for quieter output

    - name: Initialize results list
      ansible.builtin.set_fact:
        host_results: []

    - name: Append each command result to results list
      ansible.builtin.set_fact:
        host_results: "{{ host_results + [
          {
            'rule': item.item.RuleID,
            'command': item.item.Command,
            'notes': item.item.Notes,
            'rc': item.rc | default(-1),
            'stdout': (item.stdout if (item.stdout is defined and (item.stdout | length) > 0) else ((item.stdout_lines | default([])) | join('\n'))),
            'stderr': (item.stderr if (item.stderr is defined and (item.stderr | length) > 0) else ((item.stderr_lines | default([])) | join('\n')))
          }
        ] }}"
      loop: "{{ cmd_out.results | default([]) }}"

    - name: Build aggregated results across hosts (grouped by command)
      delegate_to: localhost
      run_once: true
      become: false
      ansible.builtin.set_fact:
        aggregated_results: >-
          {{ [
            {
              'rule': c.RuleID,
              'command': c.Command,
              'notes': c.Notes,
              'hosts': [
                {
                  'host': h,
                  'rc': (
                    (hostvars[h].host_results | default([]) | selectattr('command', 'equalto', c.Command) | list | first).rc
                    if (hostvars[h].host_results | default([]) | selectattr('command', 'equalto', c.Command) | list | length) > 0 else -1
                  ),
                  'stdout': (
                    (hostvars[h].host_results | default([]) | selectattr('command', 'equalto', c.Command) | list | first).stdout
                    if (hostvars[h].host_results | default([]) | selectattr('command', 'equalto', c.Command) | list | length) > 0 else ''
                  ),
                  'stderr': (
                    (hostvars[h].host_results | default([]) | selectattr('command', 'equalto', c.Command) | list | first).stderr
                    if (hostvars[h].host_results | default([]) | selectattr('command', 'equalto', c.Command) | list | length) > 0 else ''
                  )
                }
                for h in groups['all']
              ]
            }
            for c in commands
          ] }}

    - name: Write aggregated results to controller as JSON
      delegate_to: localhost
      run_once: true
      become: false
      ansible.builtin.copy:
        content: "{{ aggregated_results | to_nice_json }}"
        dest: "{{ results_dir }}/stig_results_aggregated.json"
        mode: "0644"

    - name: Also write results to the remote host (optional)
      ansible.builtin.copy:
        content: "{{ host_results | to_nice_json }}"
        dest: "/tmp/stig_results.json"
        mode: "0644"
